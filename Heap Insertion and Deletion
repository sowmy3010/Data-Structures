#include<bits/stdc++.h>
using namespace std;
// A class for Min Heap
class MinHeap{
    int *heap_array; 
    int capacity; 
    int heap_size; 

public:
    MinHeap(int capacity){
        this->heap_size = 0;
        this->capacity = capacity;
        this->heap_array = new int[capacity];
    }
    void MinHeapify(int i){

        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && heap_array[l] < heap_array[i])//left element
            smallest = l;
        if (r < heap_size && heap_array[r] < heap_array[smallest])//right element
            smallest = r;
        if (smallest != i)
        {
            swap(heap_array[i], heap_array[smallest]);
            MinHeapify(smallest);
        }
    }
    int parent(int i){ return (i-1)/2; }
    int left(int i){ return (2*i + 1); }
    int right(int i){ return (2*i + 2); }
    int extractMin(){
        if (heap_size <= 0)//no element
            return INT_MAX;
        if (heap_size == 1)//one element
        {
            heap_size--;
            return heap_array[0];
        }

        int root = heap_array[0];
        heap_array[0] = heap_array[heap_size-1];
        heap_size--;
        MinHeapify(0);
        return root;
    }
    void decreaseKey(int i, int new_val){
        heap_array[i] = new_val;
        while (i != 0 && heap_array[parent(i)] > heap_array[i]){
            swap(heap_array[i], heap_array[parent(i)]);
            i = parent(i);
        }
    }
    void deleteKey(int i){
        decreaseKey(i, INT_MIN);
        extractMin();
    }
    void insertKey(int k){
        if (heap_size == capacity){
            cout << "\nOverflow: Could not insertKey\n";
            return;
        }
        int i = heap_size;
        heap_array[heap_size++] = k;
        while (i != 0 && heap_array[parent(i)] > heap_array[i]){
            swap(heap_array[i], heap_array[parent(i)]);
            i = parent(i);
        }
    }
    void printArray() {
    for (int i = 0; i < heap_size; i++)
      cout << heap_array[i] << " ";
  }

};
int main(){
   MinHeap h(11);
    h.insertKey(15);
    h.insertKey(2);
    h.insertKey(3);
    h.insertKey(1);
    h.insertKey(5);
    h.insertKey(4);
    h.deleteKey(3);
    h.deleteKey(1);
    h.deleteKey(4);
    h.printArray();
    return 0;
}
